name: Hadolint Cyberforge

on:
  push:
    branches: [ "main", "dev", "feature/*" ]
  pull_request:
    branches: [ "main", "dev" ]
  schedule:
    - cron: '42 13 * * 1'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

jobs:
  hadolint-cyberforge:
    name: Cyberforge Hadolint Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        hadolint-version: [ '2.12.0', 'latest' ]
      fail-fast: false
    steps:
      - name: 🚀 Checkout Codebase
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ⚡ Install Hadolint ${{ matrix.hadolint-version }}
        run: |
          set -e
          if [ "${{ matrix.hadolint-version }}" = "latest" ]; then
            url="https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64"
          else
            url="https://github.com/hadolint/hadolint/releases/download/v${{ matrix.hadolint-version }}/hadolint-Linux-x86_64"
          fi
          curl -sSL "$url" -o hadolint && chmod +x hadolint && sudo mv hadolint /usr/local/bin/hadolint

      - name: 🔍 Discover Dockerfiles
        id: find-dockerfiles
        run: |
          files=$(find . -type f -name '*Dockerfile*' -not -path "./vendor/*" -not -path "./node_modules/*")
          echo "dockerfiles<<EOF" >> $GITHUB_OUTPUT
          echo "$files" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "Found Dockerfiles:"
          echo "$files"

      - name: 🔥 Run Hadolint Scans
        id: hadolint
        env:
          HADOLINT_CONFIG: .hadolint.yaml
        run: |
          mkdir -p results
          exit_code=0
          for dockerfile in ${{ steps.find-dockerfiles.outputs.dockerfiles }}; do
            ofile="results/hadolint-$(basename "$dockerfile").sarif"
            echo "Scanning $dockerfile..."
            if [ -f "$HADOLINT_CONFIG" ]; then
              hadolint --config "$HADOLINT_CONFIG" --format sarif "$dockerfile" > "$ofile" || exit_code=1
            else
              hadolint --format sarif "$dockerfile" > "$ofile" || exit_code=1
            fi
          done
          exit $exit_code
        continue-on-error: true

      - name: 📤 Upload SARIF Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results/*.sarif
          wait-for-processing: true

      - name: 📣 Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const files = fs.readdirSync('results').filter(f => f.endsWith('.sarif'));
            let comment = '## 🤖 cyberforge Hadolint Report\n\n';
            for (const file of files) {
              const sarif = JSON.parse(fs.readFileSync(`results/${file}`));
              const issues = sarif.runs[0]?.results?.length || 0;
              comment += `- **${file.replace('hadolint-', '').replace('.sarif', '')}**: ${issues} issue(s) found\n`;
            }
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

      - name: 🔔 Notify on Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.27.0
        with:
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel-id: 'devops-channel'
          text: |
            🚨 cyberforge alert: Hadolint scan failed on ${{ github.repository }}! Branch: ${{ github.ref_name }}
            Check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: 🧹 Cleanup Artifacts
        if: always()
        run: |
          rm -rf results/
