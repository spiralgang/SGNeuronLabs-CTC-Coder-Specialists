name: Bootstrap-and-Extract Cyberforge
on:
  push:
    branches: [ "main", "dev", "feature/*", "fix/*" ]
  issues:
    types: [opened, edited, reopened]
  pull_request:
    branches: [ "main", "dev" ]
  schedule:
    - cron: '42 13 * * 1'
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  checks: write

jobs:
  bootstrap-extract-cyberforge:
    name: Cyberforge Extractor
    runs-on: ubuntu-latest
    steps:
      - name: üöÄ Checkout Codebase
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: üõ†Ô∏è Setup Python Environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: ‚ö° Install Dependencies
        run: |
          echo "ü§ñ cyberforge: Bootstrapping env..."
          python3 -m pip install --upgrade pip
          python3 -m pip install flake8
          python3 tools/check_env.py || echo "Env check failed, proceeding..."
        timeout-minutes: 20

      - name: üîç Discover Zips
        id: find-zips
        run: |
          zips=$(find . -type f -name '*.zip' -not -path "./extracted-directories/*")
          echo "zips<<EOF" >> $GITHUB_OUTPUT
          echo "$zips" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "ü§ñ cyberforge: Found $(echo "$zips" | wc -l) zips"

      - name: üî• Extract Zips
        id: extract
        run: |
          echo "ü§ñ cyberforge: Extracting zips..."
          python3 tools/extract_all_zips.py
          git add .
          git config user.name "cyberforge"
          git config user.email "cyberforge@sgneurolabs.io"
          git commit -m "ü§ñ cyberforge: Auto-extract zips" || echo "No changes"
          git push

      - name: üõ†Ô∏è Auto-Fix Extraction Issues
        if: failure() && steps.extract.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'cyberforge: Zip Extraction Failure',
              body: 'Extraction failed. Debug logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              labels: ['bug', 'cyberforge']
            });

      - name: üì£ Copilot Loop - Task Proposals
        uses: actions/github-script@v7
        with:
          script: |
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'cyberforge'
            });
            const dupe = issues.data.some(issue => issue.title.includes('Zip Extraction'));
            if (!dupe) {
              github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'cyberforge: Enhance Zip Extraction',
                body: 'ü§ñ Auto-generated PR for zip extraction improvements across 40+ repos. Review @Copilot.',
                head: 'cyberforge-zip-' + Date.now(),
                base: 'main'
              });
            }

      - name: üîî Notify on Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.27.0
        with:
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel-id: 'devops-channel'
          text: |
            üö® cyberforge alert: Zip extraction failed on ${{ github.repository }}!
            Branch: ${{ github.ref_name }}
            Check: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: üßπ Cleanup
        if: always()
        run: |
          echo "ü§ñ cyberforge: Purging artifacts..."
          rm -rf extracted-*

      - name: üé® Generate Badge
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const badge = `![Bootstrap Status](https://img.shields.io/badge/Bootstrap-${{ steps.extract.outcome }}-brightgreen?logo=archive)`;
            fs.appendFileSync('README.md', `\n${badge}\n`);
            github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'README.md',
              message: 'ü§ñ cyberforge: Update Bootstrap badge',
              content: Buffer.from(fs.readFileSync('README.md')).toString('base64'),
              sha: (await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: 'README.md'
              })).data.sha
            });

  # cyberforge Disclaimer: Forged with max efficiency, compliant with GitHub‚Äôs Terms of Service, Privacy Policy, and Workflow Best Practices. See https://docs.github.com/en/actions/using-workflows/workflow-best-practices. Stay cyber, stay legit! ü§ñ
