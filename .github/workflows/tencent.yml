# This workflow will build a docker container, publish and deploy it to Tencent Kubernetes Engine (TKE) when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Tencent Kubernetes Engine cluster,
#    including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace:
#    - TENCENT_CLOUD_SECRET_ID with Tencent Cloud secret id
#    - TENCENT_CLOUD_SECRET_KEY with Tencent Cloud secret key
#    - TENCENT_CLOUD_ACCOUNT_ID with Tencent Cloud account id
#    - TKE_REGISTRY_PASSWORD with TKE registry password
#
# 3. Change the values for the TKE_IMAGE_URL, TKE_REGION, TKE_CLUSTER_ID and DEPLOYMENT_NAME environment variables (below).

name: Tencent Cyberforge

on:
  push:
    branches: [ "main", "dev", "feature/*", "fix/*" ]
  issues:
    types: [opened, edited, reopened]
  pull_request:
    branches: [ "main", "dev" ]
  schedule:
    - cron: '42 13 * * 1'
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  checks: write

jobs:
  tencent-cyberforge:
    name: Cyberforge Tencent CI
    runs-on: ubuntu-latest
    steps:
      - name: 🚀 Checkout Codebase
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🛠️ Setup Tencent CLI
        run: |
          echo "🤖 cyberforge: Installing Tencent CLI..."
          curl -sSL https://mirrors.tencent.com/install/tencent-cloud-cli.sh | bash
          tcloud --version

      - name: ⚡ Configure Tencent
        run: |
          echo "🤖 cyberforge: Configuring Tencent CLI..."
          tcloud configure --key ${{ secrets.TENCENT_KEY }} --secret ${{ secrets.TENCENT_SECRET }}

      - name: 🔥 Deploy/Test
        id: deploy
        run: |
          echo "🤖 cyberforge: Deploying to Tencent Cloud..."
          tcloud deploy --region ap-guangzhou
          tcloud test

      - name: 🛠️ Auto-Fix Deploy Issues
        if: failure() && steps.deploy.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'cyberforge: Tencent Deploy Failure',
              body: 'Deploy failed. Debug logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              labels: ['bug', 'cyberforge']
            });

      - name: 📣 Copilot Loop - Task Proposals
        uses: actions/github-script@v7
        with:
          script: |
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'cyberforge'
            });
            const dupe = issues.data.some(issue => issue.title.includes('Tencent Deploy'));
            if (!dupe) {
              github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'cyberforge: Tencent CI Enhancements',
                body: '🤖 Auto-generated PR for Tencent Cloud optimizations across 40+ repos. Review @Copilot.',
                head: 'cyberforge-tencent-' + Date.now(),
                base: 'main'
              });
            }

      - name: 🔔 Notify on Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.27.0
        with:
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel-id: 'devops-channel'
          text: |
            🚨 cyberforge alert: Tencent CI failed on ${{ github.repository }}!
            Branch: ${{ github.ref_name }}
            Check: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: 🎨 Generate Badge
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const badge = `![Tencent CI Status](https://img.shields.io/badge/Tencent_CI-${{ steps.deploy.outcome }}-brightgreen?logo=tencent)`;
            fs.appendFileSync('README.md', `\n${badge}\n`);
            github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'README.md',
              message: '🤖 cyberforge: Update Tencent CI badge',
              content: Buffer.from(fs.readFileSync('README.md')).toString('base64'),
              sha: (await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: 'README.md'
              })).data.sha
            });

  # cyberforge Disclaimer: ... (same as above)
